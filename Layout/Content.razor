@page "/"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using FormGenerator.Model
@using System.Text.Json


<div class="d-flex h-100 w-100">
    <div class="left-menu overflow-auto h-100">
        <div class="accordion w-100" id="defaultAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <span class="accordion-button m-0 f-s-13" data-bs-toggle="collapse"
                          data-bs-target="#defaultField" aria-expanded="true" aria-controls="collapseOne">
                        Default Fields
                    </span>
                </h2>
                <div class="accordion-collapse collapse show text-center pt-2 pb-2" id="defaultField"
                     data-bs-parent="#defaultAccordion">
                    @foreach (var obj in defautBtn)
                    {
                        <button class="btn btn-outline-secondary basic-buttons m-1" @onclick="(() => CreateElement(obj.Name))">
                            <i class="@obj.Icon"></i>
                            @obj.Name
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="accordion w-100" id="basicAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <span class="accordion-button m-0 f-s-13" data-bs-toggle="collapse"
                          data-bs-target="#basicField" aria-expanded="true" aria-controls="collapseOne">
                        Basic Fields
                    </span>
                </h2>
                <div class="accordion-collapse collapse show text-center pt-2 pb-2" id="basicField"
                     data-bs-parent="#basicAccordion">
                    @foreach (var obj in basicBtns)
                    {
                        <button class="btn btn-outline-secondary basic-buttons m-1" @onclick="(() => CreateElement(obj.Name))">
                            <i class="@obj.Icon"></i>
                            @obj.Name
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="accordion" id="containerAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <span class="accordion-button m-0 f-s-13" data-bs-toggle="collapse"
                          data-bs-target="#containerFields" aria-expanded="true" aria-controls="collapseOne">
                        Container
                    </span>
                </h2>
                <div class="accordion-collapse collapse show text-center pt-2 pb-2" id="containerFields"
                     data-bs-parent="#containerAccordion">
                    @foreach (var obj in containerBtns)
                    {
                        <button class="btn btn-outline-secondary basic-buttons m-1" @onclick="(() => CreateElement(obj.Name))">
                            <i class="@obj.Icon"></i>
                            @obj.Name
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="content w-64 p-0 overflow-auto">
      <div class="row d-flex align-items-center border-b-black p-2 w-100">
        <div class="col-md-4 f-s-12">
            <i class="fa-solid fa-brush text-light mx-1 pointer" @onclick="AllRemove"></i>
            <i class="fa-brands fa-squarespace text-light pointer"></i>
            <span class="mx-2 mb-0 text-danger">Layout: 2</span>
        </div>
        
        <div class="col-md-4 text-center">
            <div class="btn-group" role="group">
                <button class="btn btn-outline-info btn-sm" @onclick="(() => setDisplay(true))">
                    <i class="fa-solid fa-desktop"></i>
                </button>
                <button class="btn btn-outline-light btn-sm" @onclick="() => setDisplay(false)">
                    <i class="fa-solid fa-mobile-screen-button"></i>
                </button>
            </div>
        </div>

        <div class="col-md-4 f-s-12 text-end">             
                <button class=" mx-2 mb-0 text-info" @onclick="GenerateJson">
                      <span class="mx-2 mb-0 text-info"Generate JSON</span>
                </button>

            <i class="fa-solid fa-font text-light mx-1 pointer"></i>
            <i class="fa-regular fa-eye text-light pointer"></i>
        </div>
    </div>
    <div class="d-flex justify-content-center">
        <div class="@displayClasses" id="contentBody">
                <p>@JsonData</p>
                @foreach (var field in fields)
                {
                    @if(field.FieldType == "input")
                    {
                    <div style="width: @inputWidth; touch-action :none; user-select = none;" draggable="true" @ref="draggableElement">
                        <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))" >
                            <label for="@field.Id">@field.Name :</label>
                            <input type="@field.Type" class="form-control form-control-sm" id="@field.Id" @bind="field.Value"/>
                        @if (field.Actions)
                        {
                            <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                    <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                    <i class="fa-solid fa-grip"></i>
                                </button>
                                    <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                    <i class="fa-solid fa-copy"></i>
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                    <i class="fa-solid fa-square-minus"></i>
                                </button>
                            </div>
                        }
                           </div>
                        </div>
                    }
                    else if (field.FieldType == "radio")
                    {
                        <div style="width: @inputWidth; touch-action :none; user-select = none;" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <input type="@field.Type" id="@field.Id" @bind="field.Value">
                                <label for="@field.Id">@field.Name</label>
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (field.FieldType == "checkbox")
                    {
                        <div style="width: @inputWidth; touch-action :none; user-select = none;" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <input class="form-check-input" type="@field.Type" @bind="field.Value" id="@field.Id">
                                <label class="form-check-label" for="@field.Id">@field.Name</label>
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (field.FieldType == "textarea")
                    {
                        <div style="width: @inputWidth; touch-action :none; user-select = none" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <label for="@field.Id">@field.Name</label>
                                <textarea class="form-control" id="@field.Id" rows="3" @bind="@field.Value"></textarea>
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (field.FieldType == "time" || field.FieldType == "date"@*  || field.FieldType == "select" *@)
                    {
                        <div style="width: @inputWidth; touch-action :none; user-select = none;" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <label for="@field.Id">@field.Name</label>
                                <input class="form-control" type="@field.Type" @bind="field.Value" id="@field.Id">
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    else if (field.FieldType == "select")
                    {
                        <div style="width: @inputWidth; touch-action :none; user-select = none;" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <label for="@field.Id">@field.Name</label>
                                <input class="form-control" type="@field.Type" @bind="field.Value" id="@field.Id">
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    else if (field.FieldType == "file")
                    {
                        <div style="width: @inputWidth; touch-action: none; user-select: none;" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <label for="@field.Id">@field.Name</label>
                                @* <input class="form-control" type="file" @onchange="HandleFileInputChange" id="@field.Id"> *@
                                <input class="form-control" type="file"  id="@field.Id">
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    else if (field.FieldType == "Rate")
                    {
                        <div style="width: @inputWidth; touch-action: none; user-select: none;" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <label for="@field.Id">@field.Name</label>
                                <div class="rating">
                                    <input type="radio" id="star5" name="@field.Id" value="5" /><label for="star5"><i class="fas fa-star"></i></label>
                                    <input type="radio" id="star4" name="@field.Id" value="4" /><label for="star4"><i class="fas fa-star"></i></label>
                                    <input type="radio" id="star3" name="@field.Id" value="3" /><label for="star3"><i class="fas fa-star"></i></label>
                                    <input type="radio" id="star2" name="@field.Id" value="2" /><label for="star2"><i class="fas fa-star"></i></label>
                                    <input type="radio" id="star1" name="@field.Id" value="1" /><label for="star1"><i class="fas fa-star"></i></label>

                                </div>
                                <span>@field.Value</span> <!-- Display the selected value (optional) -->
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-center justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    else if (field.FieldType == "Switch")
                    {
                        <div style="width: @inputWidth; touch-action: none; user-select: none;" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <label for="@field.Id">@field.Name</label>
                                <div class="custom-control custom-switch">
                                    <input type="Switch" class="custom-control-input" id="@field.Id" @bind="field.Value" />
                                    <label class="custom-control-label" for="@field.Id"></label>
                                </div>
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (field.FieldType == "Slider")
                    {
                        <div style="width: @inputWidth; touch-action: none; user-select: none;" draggable="true" @ref="draggableElement">
                            <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))">
                                <label for="@field.Id">@field.Name</label>
                                <input type="range" class="form-control-range" id="@field.Id" @bind="field.Value" min="@field.min" max="@field.max" step="@field.step" />
                                <span>@field.Value</span> <!-- Display the selected value (optional) -->
                                @if (field.Actions)
                                {
                                    <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                        <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                            <i class="fa-solid fa-grip"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                            <i class="fa-solid fa-copy"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                            <i class="fa-solid fa-square-minus"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>

                    }
                }
        </div>
    </div>
</div>

    <div class="setting">
        <div class="w-100 f-s-12 px-3 pt-2 pb-2 text-white">
            <span>Form Attribute</span>
            @if (!IsSelect)
            {
            <div>
            <div class="row w-100 mt-4">
                <span>Synchronize computer and mobile configurations</span>
                <div class="form-check form-switch mt-2 mx-3">
                    <input class="form-check-input radio-toggle" type="checkbox" id="toggleSlider">
                    <label class="form-check-label" for="toggleSlider"></label>
                    @* role="switch" *@
                </div>
            </div>
            <div class="row w-100 mt-4 text-start ">
                <span class="">Size Of Field</span>
                <div class="btn-group col-md-12" role="group" aria-label="Basic radio toggle button group">
                    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off">
                    <label class="btn btn-sm btn-outline-primary" for="btnradio1">Large</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" checked>
                    <label class="btn btn-sm btn-outline-primary" for="btnradio2">Default</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
                    <label class="btn btn-sm btn-outline-primary" for="btnradio3">Small</label>
                </div>
            </div>
            <div class="row w-100 mt-4">
                <span>label Alignment</span>
                <div class="col-md-4 p-0">
                    <img src="~/_content/FormGenerator/images/no-img.png" alt="No Image" class="w-img">
                </div>
                <div class="col-md-4 p-0">
                    <img src="no-img.png" alt="No Image" class="w-img">
                </div>
                <div class="col-md-4 p-0">
                    <img src="no-img.png" alt="No Image" class="w-img">
                </div>
            </div>
            <div class="button-div mt-3 mx-2">
                <span>Button</span>
                <div class="text-center mt-2">
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
            <div class="text-container mt-3 mx-2">
                <span>Text</span>
                <input class="form-control form-control-sm" type="text" placeholder="Place Holder">
            </div>
            <div class="row w-100 mt-4 mx-2">
                <div class="col-md-6">
                    <p for="color" class="m-0">Color:</p>
                    <input type="color" id="color" name="color" value="#4797dd">
                </div>
                <div class="col-md-6">
                    <p for="backColor" class="m-0">Background:</p>
                    <input type="color" id="backColor" name="backColor" value="#4797dd">
                </div>
            </div>
            <button type="button" class="btn btn-light mt-4 mx-3">Logic Control</button>
                </div>
            }
            @if (IsSelect)
            {
                @foreach (var item in panelLst)
                {
                    <div class="fields-panel pt-3">
                        <div class="mb-3">
                            <label for="@item.id" class="form-label">Id</label>
                            <input type="text" class="form-control form-control-sm" id="@item.id" placeholder="@item.id" value="@item.id" @onchange="UpdateId">
                        </div>
                        <div class="mb-3">
                            <label for="@item.title" class="form-label">Title</label>
                            <input type="text" class="form-control form-control-sm" id="@item.title" placeholder="@item.title" value="@item.title" @onchange="UpdateTitle">
                        </div>
                        <div class="mb-3">
                            <label for="@item.content" class="form-label">Default Content</label>
                            <input type="text" class="form-control form-control-sm" id="@item.content" placeholder="@item.content" value="@item.content" @onchange="UpdateContent">
                        </div>
                        <div class="mb-3">
                            <label for="@item.placeholder" class="form-label">Place Holder</label>
                            <input type="text" class="form-control form-control-sm" id="@item.placeholder" placeholder="@item.placeholder" value="@item.placeholder">
                            @* @onchange="UpdatePlaceHolder" *@
                        </div>
                        <div class="w-100 d-flex">
                            <button class="btn btn-sm btn-outline-light mx-1 w-40px">1/4</button>
                            <button class="btn btn-sm btn-outline-light w-40px">1/3</button>
                            <button class="btn btn-sm btn-outline-light mx-1 w-40px">1/2</button>
                            <button class="btn btn-sm btn-outline-light w-40px">2/3</button>
                            <button class="btn btn-sm btn-outline-light mx-1 w-40px">3/4</button>
                            <button class="btn btn-sm btn-outline-light w-40px">1</button>
                        </div>

                        <div class="pt-2 pb-2">
                            <input class="form-check-input" type="checkbox" id="trim">
                            <label class="form-check-label" for="trim">Trim</label>
                        </div>
                        <div class="pb-2">
                            <input class="form-check-input" type="checkbox" id="required">
                            <label class="form-check-label" for="required">Required</label>
                        </div>
                        <div class="pb-2">
                            <input class="form-check-input" type="checkbox" id="disabled">
                            <label class="form-check-label" for="disabled">Disabled</label>
                        </div>
                        <div class="pb-2">
                            <input class="form-check-input" type="checkbox" id="clearable">
                            <label class="form-check-label" for="clearable">Clearable</label>
                        </div>

                    </div>
                }
            }
        </div>
       
    </div>
</div>

@code{

    List<ButtonModel> containerBtns = new List<ButtonModel>
    {
        new ButtonModel { Icon = "fa fa-envelope-o", Name = "Grid" },
        new ButtonModel { Icon = "fa fa-phone-square", Name = "Table" },
        new ButtonModel { Icon = "fa fa-pencil", Name = "Tabs" },
        new ButtonModel { Icon = "fa fa-location-arrow", Name = "Divider" },
        new ButtonModel { Icon = "fa fa-drivers-license-o", Name = "Sub-form" },
    };

    List<ButtonModel> basicBtns = new List<ButtonModel>
    {
        new ButtonModel { Icon = "fa fa-envelope-o", Name = "Input" },
        new ButtonModel { Icon = "fa fa-phone-square", Name = "TextArea" },
        new ButtonModel { Icon = "fa fa-pencil", Name = "Number" },
        new ButtonModel { Icon = "fa fa-location-arrow", Name = "Radio" },
        new ButtonModel { Icon = "fa fa-drivers-license-o", Name = "Checkbox" },
        new ButtonModel { Icon = "fa fa-drivers-license-o", Name = "Select" },
        new ButtonModel { Icon = "fa fa-drivers-license-o", Name = "Time" },
        new ButtonModel { Icon = "fa fa-drivers-license-o", Name = "Date" },
        new ButtonModel { Icon = "fa fa-drivers-license-o", Name = "Rate" },
        new ButtonModel { Icon = "fa fa-pencil", Name = "Switch" },
        new ButtonModel { Icon = "fa fa-pencil", Name = "Slider" },
        new ButtonModel { Icon = "fa fa-pencil", Name = "Html" },
        new ButtonModel { Icon = "fa fa-pencil", Name = "Cascader" },
        new ButtonModel { Icon = "fa fa-pencil", Name = "File" },
    };

    List<ButtonModel> defautBtn = new List<ButtonModel>
    {
        new ButtonModel { Icon = "fa fa-envelope-o", Name = "Email" },
        new ButtonModel { Icon = "fa fa-phone-square", Name = "Phone" },
        new ButtonModel { Icon = "fa fa-pencil", Name = "URL" },
        new ButtonModel { Icon = "fa fa-location-arrow", Name = "Region" },
        new ButtonModel { Icon = "fa fa-drivers-license-o", Name = "Id" }
    };

    List<InputModel> fields = new List<InputModel>();

    List<Panel> panelLst = new List<Panel>();

    private bool IsSelect = false;
    private ElementReference draggableElement;
    private string displayClasses = "h-88vh mt-3 overflow-auto w-100";
    private int inputFieldCount = 1;
    private string inputWidth = "100%";

    private void setDisplay(bool display)
    {
        if (display)
        {
    displayClasses = "h-88vh mt-3 overflow-auto w-100";
        }
        else
        {
    displayClasses = "h-88vh mt-3 overflow-auto w-50";
        }
    }

    private void AllRemove()
    {
        fields.Clear();
        panelLst.Clear();
        IsSelect = false;
    }

    private void onAction(string currentId)
    {
        var currentObj = fields.FirstOrDefault(o => o.Id == currentId);
        if (!currentObj.Class.Contains("selected"))
        {
    currentObj.Class = "selected mx-2 p-2 form-group";
    currentObj.Actions = true;
    IsSelect = true;
    panelLst.Add(new Panel { id = currentId, title = currentObj.Name, content = currentObj.Value, placeholder = currentObj.Name, clearable = true, disabled = false, required = false, trim = false, width = 100 });
        }
        else
        {
    currentObj.Class = "p-2 mx-2 form-group mb-2";
    currentObj.Actions = false;
    IsSelect = false;
    panelLst.Clear();
        }
    }

    private void OnRemove(string currentId)
    {
        var rowId = fields.FirstOrDefault(x => x.Id == currentId);
        if (rowId != null)
        {
    fields.Remove(rowId);
    var count = panelLst.Count();
    if (count > 0)
    {
        panelLst.Clear();
        IsSelect = false;
    }
        }
    }

    private void CreateElement(string? elementName)
    {
        if (elementName != null)
        {
    switch (elementName)
    {
        case "Email":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "email", Actions = false, Value = "abc.123@gmail.com", FieldType = "input" });
            break;
        case "Phone":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "text", Actions = false, Value = "0312-4690876", FieldType = "input" });
            break;
        case "URL":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "text", Actions = false, Value = "www.google.com", FieldType = "input" });
            break;
        case "Region":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "text", Actions = false, Value = "Islam", FieldType = "input" });
            break;
        case "Id":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "number", Actions = false, Value = "001", FieldType = "input" });
            break;
        case "Input":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "text", Actions = false, Value = "Type...", FieldType = "input" });
            break;
        case "Number":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "number", Actions = false, Value = "13000", FieldType = "input" });
            break;
        case "Radio":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "radio", Actions = false, Value = "", FieldType = "radio" });
            break;
        case "Checkbox":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "checkbox", Actions = false, Value = "", FieldType = "checkbox" });
            break;
        case "TextArea":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "checkbox", Actions = false, Value = "Hey...! nice to meet you.", FieldType = "textarea" });
            break;
        case "Time":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "time", Actions = false, Value = "Select Time", FieldType = "time" });
            break;
        case "Date":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "date", Actions = false, Value = "Select Date", FieldType = "date" });
            break;                    
        case "Select":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "select", Actions = false, Value = "Select", FieldType = "select" });
            break;
        case "File":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "file", Actions = false, Value = "Upload a file", FieldType = "file" });
            break;
        case "Rate":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "Rate", Actions = false, Value = "", FieldType = "Rate" });
            break;
        case "Switch":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "Switch", Actions = false, Value = "", FieldType = "Switch" });
            break;
        case "Slider":
            fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-check mb-2", Type = "Slider", Actions = false, Value = "", FieldType = "Slider" });
            break;
    }
        }
    }

    private async void DragDrop ( )
    {
        await JSRuntime.InvokeVoidAsync("initializeDragAndDrop", draggableElement);
    }

    private void UpdateWidth(MouseEventArgs e)
    {
        inputWidth = $"{e.ClientX}%";
    }

    private void UpdateTitle(ChangeEventArgs e)
    {
        var data = fields.Find(x => x.Class.Contains("selected"));
        if (data != null)
        {
    data.Name = e.Value.ToString();
        }
    }

    private void UpdateId(ChangeEventArgs e)
    {
        var data = fields.Find(x => x.Class.Contains("selected"));
        if (data != null)
        {
    data.Id = e.Value.ToString();
        }
    }

    private void UpdateContent(ChangeEventArgs e)
    {
        var data = fields.Find(x => x.Class.Contains("selected"));
        if (data != null)
        {
    data.Value = e.Value.ToString();
        }
    }
    public string JsonData { get; set; }

    private void GenerateJson()
    {
    var inputField = new InputModel(); // Assuming you have defined the InputField class as shown in the previous example
        JsonData = JsonSerializer.Serialize(inputField, new JsonSerializerOptions { WriteIndented = true });
    }

    // private void UpdatePlaceHolder(ChangeEventArgs e)
    // {
    //     var data = fields.Find(x => x.Class.Contains("selected"));
    //     if (data != null)
    //     {
    //         data.P = e.Value.ToString();
    //     }
    // }


}