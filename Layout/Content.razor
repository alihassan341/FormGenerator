@page "/"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="d-flex h-100 w-100">
    @* sidebar start *@
    <div class="left-menu w-16 overflow-auto h-100">
        <div class="accordion w-100" id="defaultAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <span class="accordion-button m-0 f-s-13" data-bs-toggle="collapse"
                          data-bs-target="#defaultField" aria-expanded="true" aria-controls="collapseOne">
                        Default Fields
                    </span>
                </h2>
                <div class="accordion-collapse collapse show text-center pt-2 pb-2" id="defaultField"
                     data-bs-parent="#defaultAccordion">
                    @foreach (var obj in defautBtn)
                    {
                        <button class="btn btn-outline-secondary basic-buttons m-1" @onclick="(() => CreateElement(obj.Name))">

                            <i class="@obj.Icon"></i>
                            @obj.Name
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="accordion w-100" id="basicAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <span class="accordion-button m-0 f-s-13" data-bs-toggle="collapse"
                          data-bs-target="#basicField" aria-expanded="true" aria-controls="collapseOne">
                        Basic Fields
                    </span>
                </h2>
                <div class="accordion-collapse collapse show text-center pt-2 pb-2" id="basicField"
                     data-bs-parent="#basicAccordion">
                    @foreach (var obj in basicBtns)
                    {
@*                         @onclick
= "(() => CreateElement(obj.Name))" *@
                        <button class="btn btn-outline-secondary btn-sm m-1" @onclick="(() => CreateElement(obj.Name))">
                            <i class="@obj.Icon"></i>
                            @obj.Name
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="accordion" id="containerAccordion">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <span class="accordion-button m-0 f-s-13" data-bs-toggle="collapse"
                          data-bs-target="#containerFields" aria-expanded="true" aria-controls="collapseOne">
                        Container
                    </span>
                </h2>
                <div class="accordion-collapse collapse show text-center pt-2 pb-2" id="containerFields"
                     data-bs-parent="#containerAccordion">
                    @foreach (var obj in containerBtns)
                    {
                        <button class="btn btn-outline-secondary btn-sm m-1">
                            <i class="@obj.Icon"></i>
                            @obj.Name
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    @* sidebar end *@

    @* content start *@
    <div class="content w-64 p-0 overflow-auto">
    <div class="row d-flex align-items-center border-b-black p-2 w-100">
        <div class="col-md-4 f-s-12">
            @* <button type="button" class="btn" data-bs-toggle="popover" data-bs-title="Popover title" data-bs-content="Testing Popover">
            </button> *@
            <i class="fa-solid fa-brush text-light mx-1 pointer" @onclick="AllRemove"></i>
            <i class="fa-brands fa-squarespace text-light pointer"></i>
            <span class="mx-2 mb-0 text-danger">Layout: 2</span>
        </div>
        
        <div class="col-md-4 text-center">
            <div class="btn-group" role="group">
                <button class="btn btn-outline-info btn-sm" @onclick="(() => setDisplay(true))">
                    <i class="fa-solid fa-desktop"></i>
                </button>
                <button class="btn btn-outline-light btn-sm" @onclick="() => setDisplay(false)">
                    <i class="fa-solid fa-mobile-screen-button"></i>
                </button>
            </div>
        </div>

        <div class="col-md-4 f-s-12 text-end">
            <span class="mx-2 mb-0 text-info">Generate JSON</span>
            <i class="fa-solid fa-font text-light mx-1 pointer"></i>
            <i class="fa-regular fa-eye text-light pointer"></i>
        </div>
    </div>
    <div class="d-flex justify-content-center">
        <div class="@displayClasses" id="contentBody">


                @foreach (var field in fields)
                {
                    <div style="width: @inputWidth;touch-action :none;user-select = none" draggable="true" @ref="draggableElement">
                        
                    <div class="@field.Class, resize-handle" @onclick="(() => onAction(field.Id))" >
                        <label for="@field.Id">@field.Name :</label>
                            <input type="@field.Type" class="form-control form-control-sm" id="@field.Id" @bind="field.Value"/>
                        @if (field.Actions)
                        {
                            <div class="d-flex align-items-ceneter justify-content-end pt-2">
                                    <button type="button" class="btn btn-outline-light btn-sm" @onclick="DragDrop">
                                    <i class="fa-solid fa-grip"></i>
                                </button>
                                    <button type="button" class="btn btn-outline-info btn-sm mx-3" @onclick="(() => CreateElement(field.Name))">
                                    <i class="fa-solid fa-copy"></i>
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => OnRemove(field.Id))">
                                    <i class="fa-solid fa-square-minus"></i>
                                </button>
                            </div>
                        }
                    </div>
                    </div>
                }
        </div>
    </div>
</div>
    @* content end *@

    @*setting start *@
    <div class="setting w-20">
        @if (!IsSelect)
        {   
        <div class="row w-100 f-s-12 px-3 pt-2 pb-2 text-white">
            <span>Form Attribute</span>

            <div class="row w-100 mt-4">
                <span>Synchronize computer and mobile configurations</span>
                <div class="form-check form-switch mt-2 mx-3">
                    <input class="form-check-input radio-toggle" type="checkbox" id="toggleSlider">
                    <label class="form-check-label" for="toggleSlider"></label>
                    @* role="switch" *@
                </div>
            </div>
            <div class="row w-100 mt-4 text-start ">
                <span class="">Size Of Field</span>
                <div class="btn-group col-md-12" role="group" aria-label="Basic radio toggle button group">
                    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off">
                    <label class="btn btn-sm btn-outline-primary" for="btnradio1">Large</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" checked>
                    <label class="btn btn-sm btn-outline-primary" for="btnradio2">Default</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
                    <label class="btn btn-sm btn-outline-primary" for="btnradio3">Small</label>
                </div>
            </div>
            <div class="row w-100 mt-4">
                <span>label Alignment</span>
                <div class="col-md-4 p-0">
                    <img src="~/_content/FormGenerator/images/no-img.png" alt="No Image" class="w-img">
                </div>
                <div class="col-md-4 p-0">
                    <img src="no-img.png" alt="No Image" class="w-img">
                </div>
                <div class="col-md-4 p-0">
                    <img src="no-img.png" alt="No Image" class="w-img">
                </div>
            </div>
            <div class="button-div mt-3 mx-2">
                <span>Button</span>
                <div class="text-center mt-2">
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
            <div class="text-container mt-3 mx-2">
                <span>Text</span>
                <input class="form-control form-control-sm" type="text" placeholder="Place Holder">
            </div>
            <div class="row w-100 mt-4 mx-2">
                <div class="col-md-6">
                    <p for="color" class="m-0">Color:</p>
                    <input type="color" id="color" name="color" value="#4797dd">
                </div>
                <div class="col-md-6">
                    <p for="backColor" class="m-0">Background:</p>
                    <input type="color" id="backColor" name="backColor" value="#4797dd">
                </div>
            </div>
            <button type="button" class="btn btn-light mt-4 mx-3">Logic Control</button>
        </div>
        }
        
        @if (IsSelect)
        {
            
        <div class="fields-panel">

            <div>
                <label for="Id" required="true">Id</label>
                <input type="number" id="Id"/>
            </div>
        </div>
        }
    </div>
    @*setting end *@
</div>

@code{
    // content start

    private bool IsSelect = false;

    private string displayClasses = "h-88vh mt-3 overflow-auto w-100";

    private void setDisplay(bool display)
    {
        if (display)
        {
            displayClasses = "h-88vh mt-3 overflow-auto w-100";
        }
        else
        {
            displayClasses = "h-88vh mt-3 overflow-auto w-50";
        }
    }

    private void AllRemove()
    {
        fields.Clear();
    }

    // content end 

    // sidebar start

    private void onAction(string currentId)
    {
        var currentObj = fields.FirstOrDefault(o => o.Id == currentId);
        if (!currentObj.Class.Contains("selected"))
        {
            currentObj.Class = "selected p-2 form-group";
            currentObj.Actions = true;
            IsSelect = true;
        }
        else
        {
            currentObj.Class = "p-2 form-group mb-2";
            currentObj.Actions = false;
            IsSelect = false;
        }
    }

    private void OnRemove(string currentId)
    {
        var rowId = fields.FirstOrDefault(x => x.Id == currentId);
        if (rowId != null)
        {
            fields.Remove(rowId);
        }
    }

    private void DuplicateField(string currentId)
    {
        var currentObj = fields.FirstOrDefault(x => x.Id == currentId);        
        fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = "Email", Class = "p-2 form-group mb-2", Type = "email", Actions = false, Value = "abc.123@gmail.com" });
    }

    public class InputModel
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Value { get; set; } = "";
        public string Type { get; set; } = "";
        public string Class { get; set; } = "";
        public bool Actions { get; set; } = true;

    }


    private List<InputModel> fields = new List<InputModel>();

    private int inputFieldCount = 1;

    private void CreateElement(string? elementName)
    {
        if (elementName != null)
        {
            switch (elementName)
            {
                case "Email":
                    fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "email", Actions = false, Value = "abc.123@gmail.com" });
                    break;
                case "Phone":
                    fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "text", Actions = false, Value = "0312-4690876" });
                    break;
                case "URL":
                    fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "text", Actions = false, Value = "www.google.com" });
                    break;
                case "Region":
                    fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "text", Actions = false, Value = "Islam" });
                    break;
                case "Id":
                    fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "number", Actions = false, Value = "001" });
                    break;
                case "Input":
                    fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "text", Actions = false, Value = "Type..." });
                    break;
                case "Number":
                    fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "number", Actions = false, Value = "13000" });
                    break;
                case "Radio":
                    fields.Add(new InputModel { Id = $"emp{inputFieldCount++}", Name = elementName, Class = "p-2 form-group mb-2", Type = "radio", Actions = false, Value = "" });
                    break;
            }
        }
    }

    List<buttonCls> containerBtns = new List<buttonCls>
    {
        new buttonCls { Icon = "fa fa-envelope-o", Name = "Grid" },
        new buttonCls { Icon = "fa fa-phone-square", Name = "Table" },
        new buttonCls { Icon = "fa fa-pencil", Name = "Tabs" },
        new buttonCls { Icon = "fa fa-location-arrow", Name = "Divider" },
        new buttonCls { Icon = "fa fa-drivers-license-o", Name = "Sub-form" },
    };

    List<buttonCls> basicBtns = new List<buttonCls>
    {
        new buttonCls { Icon = "fa fa-envelope-o", Name = "Input" },
        new buttonCls { Icon = "fa fa-phone-square", Name = "TextArea" },
        new buttonCls { Icon = "fa fa-pencil", Name = "Number" },
        new buttonCls { Icon = "fa fa-location-arrow", Name = "Radio" },
        new buttonCls { Icon = "fa fa-drivers-license-o", Name = "Checkbox" },
        new buttonCls { Icon = "fa fa-drivers-license-o", Name = "Select" },
        new buttonCls { Icon = "fa fa-drivers-license-o", Name = "Time" },
        new buttonCls { Icon = "fa fa-drivers-license-o", Name = "Date" },
        new buttonCls { Icon = "fa fa-drivers-license-o", Name = "Rate" },
        new buttonCls { Icon = "fa fa-pencil", Name = "Switch" },
        new buttonCls { Icon = "fa fa-pencil", Name = "Slider" },
        new buttonCls { Icon = "fa fa-pencil", Name = "Html" },
        new buttonCls { Icon = "fa fa-pencil", Name = "Cascader" },
        new buttonCls { Icon = "fa fa-pencil", Name = "File" },
    };

    private List<buttonCls> defautBtn = new List<buttonCls>
    {
        new buttonCls { Icon = "fa fa-envelope-o", Name = "Email" },
        new buttonCls { Icon = "fa fa-phone-square", Name = "Phone" },
        new buttonCls { Icon = "fa fa-pencil", Name = "URL" },
        new buttonCls { Icon = "fa fa-location-arrow", Name = "Region" },
        new buttonCls { Icon = "fa fa-drivers-license-o", Name = "Id" }
    };

    private class buttonCls
    {
        public string? Icon { get; set; }
        public string? Name { get; set; }
    };

    private ElementReference draggableElement;
    private async void DragDrop ( )
    {
        await JSRuntime.InvokeVoidAsync("initializeDragAndDrop", draggableElement);
    }

    private string inputWidth = "100%";

    private void UpdateWidth(MouseEventArgs e)
    {
        inputWidth = $"{e.ClientX}%";
    }

}